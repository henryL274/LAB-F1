#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 21 09:28:35 2025

@author: hannanasir
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib

# Function to extract data from a single upward-facing sensor dataset
def data_extractor():
    return np.loadtxt(f"/Users/hannanasir/Desktop/jan15/longdata.csv", delimiter=",", skiprows=1)

# Load data from the upward-facing sensor
data = data_extractor()

# Extract time and sensor reading columns
time = data.T[0]
sensor_readings = data.T[1]

# Introduce varying cloud coverage to simulate real-world conditions
np.random.seed(42)  # For reproducibility
cloud_factors = np.random.uniform(0.8, 1.2, len(sensor_readings))  # Simulate cloud coverage as a multiplier

sensor_readings *= cloud_factors

# Combine data into a DataFrame for machine learning
data_df = pd.DataFrame({"time": time, "sensor_reading": sensor_readings})

# Example feature engineering: Add derived features (e.g., time-related transformations)
data_df["time_of_day"] = data_df["time"] % (24 * 3600)  # Seconds since midnight
data_df["time_hours"] = data_df["time_of_day"] / 3600  # Convert to hours

# Define features (X) and target (y)
features = ["time", "time_of_day", "time_hours"]
X = data_df[features]
y = data_df["sensor_reading"]

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"R-squared (R2): {r2}")

# Feature importance
importances = model.feature_importances_
feature_importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

print("\nFeature Importances:")
print(feature_importance_df)

# Plot feature importances
plt.figure(figsize=(8, 6))
plt.barh(feature_importance_df['Feature'], feature_importance_df['Importance'], color='skyblue')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.title('Feature Importances')
plt.gca().invert_yaxis()
plt.show()

# Visualize predictions vs actual values
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.6, color='blue')
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--', color='red', linewidth=2)
plt.xlabel('Actual Sensor Reading')
plt.ylabel('Predicted Sensor Reading')
plt.title('Actual vs Predicted Sensor Reading')
plt.show()

# Save the trained model for future use
joblib.dump(model, 'sensor_model.pkl')
